{"ast":null,"code":"import _slicedToArray from \"/Users/bret/Documents/Lambda/Build Week/Front-End/salty-hackers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/bret/Documents/Lambda/Build Week/Front-End/salty-hackers/src/components /SignInForm.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { withFormik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport CreateAccountForm from \"./CreateAccountForm\";\nimport styled from \"styled-components\";\nimport \"../App.css\";\nconst FormDiv = styled.div`\n  width: 75%;\n  margin: auto;\n  height: 60vh;\n  padding: 1%;\n\n  hr {\n    border: solid 1px #264653;\n  }\n\n  p {\n    color: #264653;\n  }\n\n  .Form-error {\n    width: 20%;\n    margin: auto;\n    font-size: 0.7em;\n    color: red;\n\n    @media (max-width: 800px) {\n      width: 35%;\n    }\n  }\n`;\n\nconst SignInForm = ({\n  values,\n  errors,\n  touched,\n  status\n}) => {\n  document.title = \"Sign In | SHNT\";\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        signIn = _useState2[0],\n        setSignIn = _useState2[1];\n\n  useEffect(() => {\n    console.log(\"status has changed!\", status); // if status has content (an obj from API response) then render function setAnimals\n    // use a spread to create a new array with all of animals' previous values + the new obj from the API stored in status\n    // could be setAnimals([...animals, status]) but that fires a warning that we should watch animals. We don't need to watch for animals changes (this is the only place it could change)\n    // change to animals => [...animals, status] to read in the current value of animals, and then use it to create a new array\n\n    status && setSignIn(signIn => [...signIn, status]);\n  }, [status]);\n  return React.createElement(FormDiv, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Username:\"), React.createElement(\"label\", {\n    htmlFor: \"username\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"username\",\n    type: \"text\",\n    name: \"username\",\n    className: \"form-field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), touched.username && errors.username && React.createElement(\"p\", {\n    className: \"Form-error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, errors.username)), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Password:\"), React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"password\",\n    type: \"password\",\n    name: \"password\",\n    className: \"form-field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), touched.email && errors.password && React.createElement(\"p\", {\n    className: \"Form-error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, errors.password)), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"Button\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Log In\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: \"#forgotpassword\",\n    className: \"forgot\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Forgot Password?\")), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"OR\"), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(Link, {\n    to: \"/createaccount\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Create Account\")));\n};\n\nconst FormikSignInForm = withFormik({\n  mapPropsToValues(props) {\n    return {\n      username: props.email || \"\",\n      password: props.password || \"\"\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    email: Yup.string().required(\"Email is required!\"),\n    password: Yup.string().required(\"Password is required!\")\n  }),\n\n  handleSubmit(values, {\n    setStatus,\n    resetForm\n  }) {\n    axios.post(\"https://reqres.in/api/users/\", values).then(res => {\n      console.log(\"success\", res);\n      resetForm();\n    }).catch(err => console.log(err.response));\n  }\n\n})(SignInForm);\nexport default FormikSignInForm;","map":{"version":3,"sources":["/Users/bret/Documents/Lambda/Build Week/Front-End/salty-hackers/src/components /SignInForm.js"],"names":["React","useState","useEffect","BrowserRouter","Router","Route","Link","withFormik","Form","Field","Yup","axios","CreateAccountForm","styled","FormDiv","div","SignInForm","values","errors","touched","status","document","title","signIn","setSignIn","console","log","username","email","password","FormikSignInForm","mapPropsToValues","props","validationSchema","object","shape","string","required","handleSubmit","setStatus","resetForm","post","then","res","catch","err","response"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { withFormik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport CreateAccountForm from \"./CreateAccountForm\";\nimport styled from \"styled-components\";\nimport \"../App.css\";\n\nconst FormDiv = styled.div`\n  width: 75%;\n  margin: auto;\n  height: 60vh;\n  padding: 1%;\n\n  hr {\n    border: solid 1px #264653;\n  }\n\n  p {\n    color: #264653;\n  }\n\n  .Form-error {\n    width: 20%;\n    margin: auto;\n    font-size: 0.7em;\n    color: red;\n\n    @media (max-width: 800px) {\n      width: 35%;\n    }\n  }\n`;\n\nconst SignInForm = ({ values, errors, touched, status }) => {\n  document.title = \"Sign In | SHNT\";\n\n  const [signIn, setSignIn] = useState([]);\n\n  useEffect(() => {\n    console.log(\"status has changed!\", status);\n    // if status has content (an obj from API response) then render function setAnimals\n    // use a spread to create a new array with all of animals' previous values + the new obj from the API stored in status\n    // could be setAnimals([...animals, status]) but that fires a warning that we should watch animals. We don't need to watch for animals changes (this is the only place it could change)\n    // change to animals => [...animals, status] to read in the current value of animals, and then use it to create a new array\n    status && setSignIn(signIn => [...signIn, status]);\n  }, [status]);\n\n  return (\n    <FormDiv>\n      <Form>\n        <p>Username:</p>\n        <label htmlFor=\"username\">\n          <Field id=\"username\" type=\"text\" name=\"username\" className=\"form-field\" />\n          {touched.username && errors.username && (\n            <p className=\"Form-error\">{errors.username}</p>\n          )}\n        </label>\n        <p>Password:</p>\n        <label htmlFor=\"password\">\n          <Field\n            id=\"password\"\n            type=\"password\"\n            name=\"password\"\n            className=\"form-field\"\n          />\n          {touched.email && errors.password && (\n            <p className=\"Form-error\">{errors.password}</p>\n          )}\n        </label>\n        <br></br>\n        <button className=\"Button\" type=\"submit\">\n          Log In\n        </button>\n        <p>\n          <a href=\"#forgotpassword\" className=\"forgot\">\n            Forgot Password?\n          </a>\n        </p>\n        <br></br>\n      </Form>\n      <p>OR</p>\n      <hr />\n      <Link to=\"/createaccount\">\n        <button>Create Account</button>\n      </Link>\n    </FormDiv>\n  );\n};\n\nconst FormikSignInForm = withFormik({\n  mapPropsToValues(props) {\n    return {\n      username: props.email || \"\",\n      password: props.password || \"\",\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    email: Yup.string().required(\"Email is required!\"),\n    password: Yup.string().required(\"Password is required!\"),\n  }),\n\n  handleSubmit(values, { setStatus, resetForm }) {\n    axios\n      .post(\"https://reqres.in/api/users/\", values)\n      .then(res => {\n        console.log(\"success\", res);\n\n        resetForm();\n      })\n      .catch(err => console.log(err.response));\n  },\n})(SignInForm);\n\nexport default FormikSignInForm;\n"]},"metadata":{},"sourceType":"module"}